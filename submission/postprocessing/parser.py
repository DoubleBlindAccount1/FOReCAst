import re
import random
import datetime
from typing import Dict, Any

class OutputParser:
    """
    A professional, extensible parser for extracting value and confidence fields from model-generated text.
    This class provides robust static methods with detailed documentation and explicit logic for future maintainability.
    """
    @staticmethod
    def extract_value_confidence(question_type: str, prompt: str, generated_text: str) -> Dict[str, Any]:
        """
        Extract the 'value' and 'confidence' fields from the generated model output text.
        If extraction fails, assign a random plausible value and confidence based on the question type.
        Args:
            question_type (str): The type of question (e.g., 'numeric', 'date', 'binary').
            prompt (str): The prompt string used for the model.
            generated_text (str): The raw output text generated by the model.
        Returns:
            Dict[str, Any]: Dictionary with 'value' and 'confidence' fields.
        """
        # Attempt to remove the prompt from the generated text, if present
        prompt_end_idx = generated_text.find(prompt.strip())
        if prompt_end_idx != -1:
            generated_text = generated_text[prompt_end_idx + len(prompt):].strip()
        # Use regular expressions to extract value and confidence
        value_pattern = re.search(r'"value"\s*:\s*("[^"]+"|\d+\.?\d*)', generated_text)
        confidence_pattern = re.search(r'"confidence"\s*:\s*(0\.\d+|1\.0|1)', generated_text)
        value = value_pattern.group(1) if value_pattern else None
        confidence = float(confidence_pattern.group(1)) if confidence_pattern else None
        # Fallback logic if extraction fails
        if value is None or confidence is None:
            if question_type == "numeric":
                # Assign a random numeric value in a plausible range
                value = round(random.uniform(0, 100), 2)
            elif question_type == "date":
                # Assign a random date within the next 10 years
                random_days = random.randint(0, 3650)
                value = (datetime.date.today() + datetime.timedelta(days=random_days)).isoformat()
            elif question_type == "binary":
                # Assign a random binary value
                value = random.choice(["yes", "no"])
            # Assign a random confidence between 0.5 and 1.0
            confidence = round(random.uniform(0.5, 1.0), 2)
        return {"value": value, "confidence": confidence}
